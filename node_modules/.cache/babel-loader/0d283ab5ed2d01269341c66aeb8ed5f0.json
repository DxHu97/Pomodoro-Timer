{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jeremiah\\\\Thinkful\\\\Pomodoro\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusBreakButton from \"./FocusBreakButton\";\nimport PlayPauseStopButton from \"./PlayPauseStopButton\";\nimport Display from \"./Display\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration. Done\n\n  const [focusDuration, setFocusDuration] = useState(10);\n  const [breakDuration, setBreakDuration] = useState(300);\n  const [isFocus, setIsFocus] = useState(true);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://www.youtube.com/watch?v=rUWxSEwctFU\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusBreakButton, {\n    focusDuration: focusDuration,\n    setFocusDuration: setFocusDuration,\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    session: session,\n    isFocus: isFocus,\n    setIsFocus: setIsFocus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PlayPauseStopButton, {\n    isTimerRunning: isTimerRunning,\n    setIsTimerRunning: setIsTimerRunning,\n    focusDuration: focusDuration,\n    session: session,\n    setSession: setSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }))), /*#__PURE__*/React.createElement(Display, {\n    isTimerRunning: isTimerRunning,\n    focusDuration: focusDuration,\n    session: session,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Jeremiah/Thinkful/Pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","FocusBreakButton","PlayPauseStopButton","Display","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","isFocus","setIsFocus","Audio","play"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusBreakButton from \"./FocusBreakButton\"\nimport PlayPauseStopButton from \"./PlayPauseStopButton\"\nimport Display from \"./Display\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  // ToDo: Allow the user to adjust the focus and break duration. Done\n  const [focusDuration, setFocusDuration] = useState(10);\n  const [breakDuration, setBreakDuration] = useState(300);\n  const [isFocus, setIsFocus] = useState(true)\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://www.youtube.com/watch?v=rUWxSEwctFU\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n        <div className=\"row\">\n          <FocusBreakButton \n          focusDuration = {focusDuration}\n          setFocusDuration = {setFocusDuration}\n          breakDuration = {breakDuration}\n          setBreakDuration = {setBreakDuration}\n          session = {session}\n          isFocus = {isFocus}\n          setIsFocus = {setIsFocus}\n           />\n          </div>\n      <div className=\"row\">\n        <div className=\"col\">\n        <PlayPauseStopButton \n        isTimerRunning = {isTimerRunning}\n        setIsTimerRunning = {setIsTimerRunning}\n        focusDuration = {focusDuration}\n        session = {session}\n        setSession = {setSession}\n        />\n        </div>\n      </div>\n        <Display\n        isTimerRunning = {isTimerRunning}\n        focusDuration = {focusDuration}\n        session = {session}\n        breakDuration = {breakDuration}\n        />\n      </div>\n\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}